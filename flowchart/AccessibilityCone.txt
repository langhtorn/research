グローバル変数
S:球面上の三角形の集合
Fn:非凸面の集合
AccessStatus:アクセス可能性を示す配列
I:アクセス不可能領域


関数 INITIALIZE(Fn)
入力: 非凸体のファセット（面）の集合 Fn
出力: 初期化されたアクセシビリティ行列 AccessStatus

1. 境界球（単位球）の表面を、あらかじめ設定した分解能で球面三角形に分割する。
   - 分割後の球面三角形の集合を S とする。

2. AccessStatus 行列を作成する。
   - 行数 M = 球面三角形の数（Sの要素数）
   - 列数 N = モデルの面数（Fnの要素数）

3. 各ファセット f ∈ Fn に対して以下を実行:
   3.1 f の法線ベクトルを極とする半球（H(f)）を計算。
   3.2 各球面三角形 s ∈ S に対して:
       - もし s が H(f) に完全に含まれる場合:
           - AccessStatus の対応するセル（s, f）を TRUE に設定。
       - それ以外の場合:
           - セル（s, f）を FALSE に設定。

4. AccessStatus 行列を返す。


INACCESSIBLE(f, f')
アルゴリズム INACCESSIBLE(f, f')
1)  各頂点における単位球を構築する:
    - f の3つの頂点を V1, V2, V3 とする
    - 各頂点 Vi (i ∈ {1, 2, 3}) に対して、単位球を構築する
    
2)  面 f' を各単位球に投影し、投影面を f'p1, f'p2, f'p3 とする:
    - 面 f' を各単位球に投影し、得られる投影面をそれぞれ f'p1, f'p2, f'p3 とする
    - もし面 f' の頂点が単位球の中心に位置している場合、その頂点は投影に含めない
    
3)  投影された面 f'p1, f'p2, f'p3 を球面上の三角形（または共通の辺を持つ場合は弧）として扱う:
    - これらの投影面は、最大で9つの頂点を生成する
    
4)  求めた頂点群を基に凸包 CV を求める:
    - f'p1, f'p2, f'p3 の頂点群に対して凸包 CV を計算する
    - CV は球面上の凸多角形であり、方向を表す

5)  f が f' によってアクセス不可能な方向の集合 I は、CV の内部領域として定義する:
    - I は CV の内部、つまり CV の中に含まれる全ての方向からなる凸球面多角形であり、これが f が f' によってアクセス不可能となる方向の集合である

6)  結果として、I を出力する




関数 UPDATE(S, Fn):
    # Fnは非凸面の集合、Sは球面三角形の集合
    すべての非凸面ペア (f, f') ∈ Fn の中で:
        もし f と f' が同じ凹領域内にあり、向かい合っているなら:
            # 1. アクセス不能領域の計算
            I = INACCESSIBLE(f, f')  # f' の影響による f のアクセス不能領域を計算
            
            # 2. 占有テストと更新
            すべての球面三角形 s ∈ S の中で:
                もし s が I の内部に完全に含まれるなら:
                    AccessStatus[s, f] を FALSE に設定
                もし s が I と交差するなら:
                    AccessStatus[s, f] を FALSE に設定
                    # 保守的な設定として、交差する三角形もアクセス不能とする
                それ以外の場合:
                    AccessStatus[s, f] は変更しない


アルゴリズム OCCUPANCY(S, I) 占有テストを行う関数
    入力:
        S: 単位球面上の球面三角形の集合
        I: アクセス不可能領域

    1. CALCULATEENCLOSINGRECTANGLE(I) を呼び出して、アクセス不可能領域 I に対する囲い込み球面矩形 R0 を計算する。
    2. 球面矩形 R0 を拡張して、候補パッチ R を生成する。
    3. 範囲木を使用して、候補パッチ R に含まれる球面頂点 VR を取得する。
    4. 各頂点 v ∈ VR に対して次の操作を行う:
        a. 頂点 v がアクセス不可能領域 I に含まれているかをテストする。
        b. 頂点 v が I に含まれている場合:
            i. 頂点 v を共有するすべての球面三角形をアクセス不可能としてマークする。
        c. 頂点 v が I に含まれていない場合:
            i. 頂点 v を共有する各球面三角形 T に対して、T と I が交差するかをテストする。
            ii. 交差すれば、三角形 T をアクセス不可能としてマークする。
    5. UPDATEACCESSIBILITYMATRIX を呼び出して、アクセス行列 AccessStatus を占有テストの結果に基づいて更新する。


アルゴリズム CALCULATEENCLOSINGRECTANGLE(I) アクセス不可能領域Iに対して，囲い込み球面矩形R0を計算する関数
    入力:
        I: アクセス不可能領域

    1. 北極 [0,0] が領域 I に含まれている場合
        - 球面矩形 R0 の範囲を [θ1:θ2] = [0, θmax] と [Φ1:Φ2] = [0, 2π] に設定

    2. 南極 [π,0] が領域 I に含まれている場合
        - 球面矩形 R0 の範囲を [θ1:θ2] = [θmin, π] と [Φ1:Φ2] = [0, 2π] に設定

    3. Φ = 0 の弧が領域 I に交差する場合（図8参照）
        - 球面矩形 R0 の範囲を 2つに分割:
            - 一つ目の範囲: [θ1:θ2] = [θmin, θmax] と [Φ1:Φ2] = [0, Φlower]
            - 二つ目の範囲: [θ'1:θ'2] = [θmin, θmax] と [Φ'1:Φ'2] = [Φhigher, 2π]
    
    4. それ以外の場合（通常ケース）
        - 球面矩形 R0 の範囲を [θ1:θ2] = [θmin, θmax] と [Φ1:Φ2] = [Φmin, Φmax] に設定
    
    5. 出力:
        - 球面矩形 R0: [θ1:θ2] と [Φ1:Φ2] で指定される範囲


アルゴリズム UPDATEACCESSIBILITYMATRIX(S, I, V_R) アクセス可能性行列を更新する関数
入力:
  S: 球面上の三角形の集合
  I: アクセス不可能領域
  V_R: 候補領域 R 内の頂点の集合

手順:
1. すべての頂点 v ∈ V_R について繰り返し処理を行う：
   1.1 v を共有しているすべての球面三角形の集合 T_v を取得する。
   
   1.2 v がアクセス不可能領域 I に含まれている場合：
       - T_v 内のすべての球面三角形を「アクセス不可能」としてマークする。
       - 対応するエントリをマトリックス AccessStatus に更新する。

   1.3 そうでない場合 (v が I に含まれていない場合)：
       - T_v 内の各球面三角形 t について次を行う：
           - t が I と交差している場合：
               - t を「アクセス不可能」としてマークする。
               - 対応するエントリをマトリックス AccessStatus に更新する。

出力:
  更新されたアクセス可能性マトリックス AccessStatus
